<?php

namespace Usuario\V1\Rest\Usuario;

use Application\Entity\OAuth2\Client;
use Application\Entity\OAuth2\Usuario;
use Doctrine\Common\Collections\Criteria;
use ZF\Apigility\Doctrine\Server\Resource\DoctrineResource;
use ZF\OAuth2\Doctrine\Adapter\DoctrineAdapter;

class UsuarioResource extends DoctrineResource
{
    private $doctrineOAuth2;

    public function __construct(DoctrineAdapter $doctrineOAuth2 = null)
    {
        $this->doctrineOAuth2 = $doctrineOAuth2;

        return $this;
    }

    public function fetch($id)
    {
        // Retorna o próprio usuário
        if ($id === 'me') {
            /* @var $identity \ZF\OAuth2\Doctrine\Identity\AuthenticatedIdentity */
            $identity = $this->getIdentity();
            /* @var $user \Application\Entity\OAuth2\Usuario */
            $user = $identity->getUser();

            return $user;
        }

        return parent::fetch($id);
    }

    public function create($data)
    {
        $this->resolvePassword($data->password);

        /* @var $entity Usuario */
        $entity = parent::create($data); // TODO: Change the autogenerated stub

        return $this->registerOauthUser($entity);
    }

    public function patch($id, $data)
    {
        if(!empty($data->password)) {
            $this->resolvePassword($data->password);
        }else{
            unset($data->password);
        }

        /* @var $entity Usuario */
        $entity = parent::patch($id, $data); // TODO: Change the autogenerated stub

        return $this->registerOauthUser($entity);
    }

    /**
     * Aplica a função Bcrypt do módulo OAuth2 configurada
     * @param $password
     * @return string
     */
    private function resolvePassword(&$password)
    {
        $password = $this->doctrineOAuth2->getBcrypt()->create($password);

        return $password;
    }

    /**
     * Registra um usuário OAUTH2 com grants password e refresh_token
     * @param Usuario $entity
     * @return Usuario
     */
    private function registerOauthUser(Usuario $entity)
    {
        $clientId = $entity->getUsername() . '_web';
        $filter = Criteria::create()
            ->where(Criteria::expr()->endsWith("clientId", '_web'));

        $oauthWeb = ($entity->getClient() ? $entity->getClient()->matching($filter) : NULL);

        if (!$oauthWeb || $oauthWeb->count() === 0) {
            $client = new Client();
            $client->setGrantType(array('password', 'refresh_token'))
                ->setClientId($clientId)
                ->setUser($entity);

            $this->getObjectManager()->persist($client);
        } else {
            $client = $oauthWeb->current();
            $client->setClientId($clientId);

            $this->getObjectManager()->merge($client);
        }

        $this->getObjectManager()->flush();

        return $entity;
    }
}
